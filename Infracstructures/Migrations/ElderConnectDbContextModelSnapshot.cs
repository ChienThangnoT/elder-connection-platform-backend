// <auto-generated />
using System;
using Infracstructures.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infracstructures.Migrations
{
    [DbContext(typeof(ElderConnectDbContext))]
    partial class ElderConnectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<float>("AvgRating")
                        .HasColumnType("real");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConnectorInforId")
                        .HasColumnType("int")
                        .HasColumnName("connector_infor_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WalletBalance")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Account__46A222CD060EDE50");

                    b.HasIndex("ConnectorInforId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectorId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("connector_id");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("customer_Id");

                    b.Property<string>("HomeType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("ConnectorId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ConnectorInfo", b =>
                {
                    b.Property<int>("ConnectorInforId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("connector_infor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectorInforId"));

                    b.Property<string>("CccdBehindImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CccdFrontImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GxnhkImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SocialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectorInforId")
                        .HasName("PK__Connecto__4A2E07F284B29E26");

                    b.ToTable("ConnectorInfo", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ConnectorsFeedback", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int>("ApplyJobId")
                        .HasColumnType("int");

                    b.Property<string>("ConnectorId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("connector_id");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsRatingStatus")
                        .HasColumnType("bit")
                        .HasColumnName("is_rating_status");

                    b.Property<DateTime?>("RatingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RatingStar")
                        .HasColumnType("int");

                    b.HasKey("RatingId")
                        .HasName("PK__Connecto__D35B278B0D41980A");

                    b.HasIndex("ApplyJobId");

                    b.HasIndex("ConnectorId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Connectors_Feedback", (string)null);
                });

            modelBuilder.Entity("Domain.Models.FavoriteList", b =>
                {
                    b.Property<int>("FavoriteListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("favorite_list_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteListId"));

                    b.Property<string>("ConnectorId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("connector_id");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customer_id");

                    b.HasKey("FavoriteListId")
                        .HasName("PK__Favorite__27954323D88B55C1");

                    b.HasIndex("ConnectorId");

                    b.HasIndex("CustomerId");

                    b.ToTable("FavoriteList", (string)null);
                });

            modelBuilder.Entity("Domain.Models.JobSchedule", b =>
                {
                    b.Property<int>("JobScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_schedule_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobScheduleId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DurationWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnTask")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int");

                    b.HasKey("JobScheduleId")
                        .HasName("PK__JobSched__35B95B7DC19DA20A");

                    b.ToTable("JobSchedule", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("account_id");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842F49B2B438");

                    b.HasIndex("AccountId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Models.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("package_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PackageId")
                        .HasName("PK__Package__63846AE87E5008BB");

                    b.HasIndex("ServiceId");

                    b.ToTable("Package", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customer_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPriorityFavoriteConnector")
                        .HasColumnType("bit");

                    b.Property<int>("JobScheduleId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<float>("SalaryOfWork")
                        .HasColumnType("real");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PostId")
                        .HasName("PK__Post__3ED7876659062A62");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("JobScheduleId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("Domain.Models.RegistrationProgram", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("registration_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationId"));

                    b.Property<string>("ConnectorId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("connector_id");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsCompleted")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("RegistrationId")
                        .HasName("PK__Registra__22A298F65EEB6408");

                    b.HasIndex("ConnectorId");

                    b.HasIndex("ProgramId");

                    b.ToTable("RegistrationProgram", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<float>("FinalPrice")
                        .HasColumnType("real");

                    b.Property<float>("OriginalPrice")
                        .HasColumnType("real");

                    b.Property<float>("RatingAvg")
                        .HasColumnType("real");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service__3E0DB8AF66D1BFED");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ServiceFeedback", b =>
                {
                    b.Property<int>("ServiceFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_feedback_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceFeedbackId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customer_id");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<bool>("Rating")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("ServiceFeedbackId")
                        .HasName("PK__Service___EEE24626F7E7E508");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PostId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Service_Feedback", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTypeId"));

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId")
                        .HasName("PK__ServiceT__288B52C673E93CD5");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceType", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TaskED", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConnectorId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("connector_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId")
                        .HasName("PK__Task__0492148D003D7EF6");

                    b.HasIndex("ConnectorId");

                    b.HasIndex("JobScheduleId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TraningProgram", b =>
                {
                    b.Property<int>("TraningProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("traning_program_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TraningProgramId"));

                    b.Property<bool>("Stauts")
                        .HasColumnType("bit");

                    b.Property<string>("TraningProgramContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraningProgramDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraningProgramLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraningProgramTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TraningProgramId")
                        .HasName("PK__TraningP__2D377ECDF508DD43");

                    b.ToTable("TraningProgram", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<float?>("TransactionAmount")
                        .HasColumnType("real");

                    b.Property<string>("TransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("WalletBalanceChange")
                        .HasColumnType("real");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__85C600AFEED0C880");

                    b.HasIndex("AccountId");

                    b.ToTable("TransactionHistory", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.HasOne("Domain.Models.ConnectorInfo", "ConnectorInfor")
                        .WithMany("Accounts")
                        .HasForeignKey("ConnectorInforId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Account__connect__267ABA7A");

                    b.Navigation("ConnectorInfor");
                });

            modelBuilder.Entity("Domain.Models.Address", b =>
                {
                    b.HasOne("Domain.Models.Account", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("ConnectorId")
                        .HasConstraintName("FK_Address_Accounts_Bga2");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Models.ConnectorsFeedback", b =>
                {
                    b.HasOne("Domain.Models.TaskED", "ApplyJob")
                        .WithMany("ConnectorsFeedbacks")
                        .HasForeignKey("ApplyJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Connector__apply__4F7CD00D");

                    b.HasOne("Domain.Models.Account", "Connector")
                        .WithMany("ConnectorsFeedbackConnectors")
                        .HasForeignKey("ConnectorId")
                        .HasConstraintName("FK__Connector__conne__5165187F");

                    b.HasOne("Domain.Models.Account", "Customer")
                        .WithMany("ConnectorsFeedbackCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Connector__custo__5070F446");

                    b.Navigation("ApplyJob");

                    b.Navigation("Connector");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Models.FavoriteList", b =>
                {
                    b.HasOne("Domain.Models.Account", "Connector")
                        .WithMany("FavoriteListConnectors")
                        .HasForeignKey("ConnectorId")
                        .HasConstraintName("FK__FavoriteL__conne__440B1D61");

                    b.HasOne("Domain.Models.Account", "Customer")
                        .WithMany("FavoriteListCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__FavoriteL__custo__4316F928");

                    b.Navigation("Connector");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Models.Notification", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__Notificat__accou__2C3393D0");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Models.Package", b =>
                {
                    b.HasOne("Domain.Models.Service", "Service")
                        .WithMany("Packages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Package__service__3A81B327");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.HasOne("Domain.Models.Address", "Address")
                        .WithMany("Posts")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Post__address_id__32E091IF");

                    b.HasOne("Domain.Models.Account", "Customer")
                        .WithMany("Posts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Post__customer_i__34C8D9D1");

                    b.HasOne("Domain.Models.JobSchedule", "JobSchedule")
                        .WithMany("Posts")
                        .HasForeignKey("JobScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Post__job_schedu__33D4B598");

                    b.HasOne("Domain.Models.Service", "Service")
                        .WithMany("Posts")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Post__service_id__32E0915F");

                    b.Navigation("Address");

                    b.Navigation("Customer");

                    b.Navigation("JobSchedule");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Models.RegistrationProgram", b =>
                {
                    b.HasOne("Domain.Models.Account", "Connector")
                        .WithMany("RegistrationPrograms")
                        .HasForeignKey("ConnectorId")
                        .HasConstraintName("FK__Registrat__conne__403A8C7D");

                    b.HasOne("Domain.Models.TraningProgram", "Program")
                        .WithMany("RegistrationPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Registrat__progr__3F466844");

                    b.Navigation("Connector");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Domain.Models.ServiceFeedback", b =>
                {
                    b.HasOne("Domain.Models.Account", "Customer")
                        .WithMany("ServiceFeedbacks")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Service_F__custo__4CA06362");

                    b.HasOne("Domain.Models.Post", "Post")
                        .WithMany("ServiceFeedbacks")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK__Service_F__post___4BAC3F29");

                    b.HasOne("Domain.Models.Service", "Service")
                        .WithMany("ServiceFeedbacks")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__Service_F__servi__4AB81AF0");

                    b.Navigation("Customer");

                    b.Navigation("Post");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Models.ServiceType", b =>
                {
                    b.HasOne("Domain.Models.Service", "Service")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ServiceTy__servi__37A5467C");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Models.TaskED", b =>
                {
                    b.HasOne("Domain.Models.Account", "Connector")
                        .WithMany("Tasks")
                        .HasForeignKey("ConnectorId")
                        .HasConstraintName("FK__Task__connector___47DBAE45");

                    b.HasOne("Domain.Models.JobSchedule", "JobSchedule")
                        .WithMany("Tasks")
                        .HasForeignKey("JobScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Task__job_schedu__46E78A0C");

                    b.Navigation("Connector");

                    b.Navigation("JobSchedule");
                });

            modelBuilder.Entity("Domain.Models.TransactionHistory", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK__Transacti__accou__29572725");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ConnectorsFeedbackConnectors");

                    b.Navigation("ConnectorsFeedbackCustomers");

                    b.Navigation("FavoriteListConnectors");

                    b.Navigation("FavoriteListCustomers");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");

                    b.Navigation("RegistrationPrograms");

                    b.Navigation("ServiceFeedbacks");

                    b.Navigation("Tasks");

                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("Domain.Models.Address", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Domain.Models.ConnectorInfo", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Models.JobSchedule", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Navigation("ServiceFeedbacks");
                });

            modelBuilder.Entity("Domain.Models.Service", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("Posts");

                    b.Navigation("ServiceFeedbacks");

                    b.Navigation("ServiceTypes");
                });

            modelBuilder.Entity("Domain.Models.TaskED", b =>
                {
                    b.Navigation("ConnectorsFeedbacks");
                });

            modelBuilder.Entity("Domain.Models.TraningProgram", b =>
                {
                    b.Navigation("RegistrationPrograms");
                });
#pragma warning restore 612, 618
        }
    }
}
