// <auto-generated />
using System;
using Infracstructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infracstructures.Migrations
{
    [DbContext(typeof(ElderConnectionContext))]
    [Migration("20240607135640_UpdateTransactionTable")]
    partial class UpdateTransactionTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<float?>("AvgRating")
                        .HasColumnType("real")
                        .HasColumnName("avg_rating");

                    b.Property<string>("Biography")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("biography");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2")
                        .HasColumnName("birthday");

                    b.Property<string>("CccdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cccd_number");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConnectorInforId")
                        .HasColumnType("int")
                        .HasColumnName("connector_infor_id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("device_token");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_picture");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnName("sex");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<float>("WalletBalance")
                        .HasColumnType("real")
                        .HasColumnName("wallet_balance");

                    b.HasKey("Id")
                        .HasName("PK_Account");

                    b.HasIndex("ConnectorInforId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AccountId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("account_id");

                    b.Property<string>("AddressDescription")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("address_description");

                    b.Property<string>("AddressDetail")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("address_detail");

                    b.Property<string>("AddressName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("address_name");

                    b.Property<string>("ContactName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("contact_phone");

                    b.Property<int>("HomeType")
                        .HasColumnType("int")
                        .HasColumnName("home_type");

                    b.HasKey("AddressId");

                    b.HasIndex("AccountId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ConnectorFeedback", b =>
                {
                    b.Property<int>("RatingConnectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rating_connector_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingConnectorId"));

                    b.Property<string>("ConnectorId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("connector_id");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsRatingStatus")
                        .HasColumnType("bit")
                        .HasColumnName("is_rating_status");

                    b.Property<DateTime?>("RatingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("rating_date");

                    b.Property<int>("RatingStars")
                        .HasColumnType("int")
                        .HasColumnName("rating_stars");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.HasKey("RatingConnectorId");

                    b.HasIndex("TaskId");

                    b.ToTable("ConnectorFeedback", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ConnectorInfo", b =>
                {
                    b.Property<int>("ConnectorInforId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("connector_infor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectorInforId"));

                    b.Property<string>("CccdBehindImg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cccd_behind_img");

                    b.Property<string>("CccdFrontImg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cccd_front_img");

                    b.Property<string>("GxnhkImg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gxnhk_img");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("is_approved");

                    b.Property<string>("LocationWork")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_work");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("send_date");

                    b.Property<string>("SocialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("social_number");

                    b.Property<string>("SyllBehindImg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("syll_behind_img");

                    b.Property<string>("SyllFrontImg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("syll_front_img");

                    b.HasKey("ConnectorInforId");

                    b.ToTable("ConnectorInfo", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ElderInformation", b =>
                {
                    b.Property<int>("ElderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("elder_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElderId"));

                    b.Property<string>("ChildId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("child_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("Pathology")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pathology");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_picture");

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnName("sex");

                    b.HasKey("ElderId");

                    b.HasIndex("ChildId");

                    b.ToTable("ElderInformation", (string)null);
                });

            modelBuilder.Entity("Domain.Models.FavoriteList", b =>
                {
                    b.Property<int>("FavoriteListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("favorite_list_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteListId"));

                    b.Property<string>("ConnectorId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("connector_id");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customer_id");

                    b.HasKey("FavoriteListId");

                    b.HasIndex("CustomerId");

                    b.ToTable("FavoriteList", (string)null);
                });

            modelBuilder.Entity("Domain.Models.JobSchedule", b =>
                {
                    b.Property<int>("JobScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_schedule_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobScheduleId"));

                    b.Property<string>("ConnectorId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("connector_id");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("ListDayWork")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("list_day_work");

                    b.Property<string>("LocationWork")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("location_work");

                    b.Property<bool>("OnTask")
                        .HasColumnType("bit")
                        .HasColumnName("on_task");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<float>("TaskProcess")
                        .HasColumnType("real")
                        .HasColumnName("task_process");

                    b.HasKey("JobScheduleId");

                    b.HasIndex("ConnectorId");

                    b.ToTable("JobSchedule", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("AccountId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("account_id");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("action");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("message");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("send_date");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("NotificationId");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customer_id");

                    b.Property<bool?>("IsPriorityFavoriteConnector")
                        .HasColumnType("bit")
                        .HasColumnName("is_priority_favorite_connector");

                    b.Property<int>("JobScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("job_schedule_id");

                    b.Property<string>("PostDescription")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("post_description");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int")
                        .HasColumnName("post_status");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<float>("SalaryAfterWork")
                        .HasColumnType("real")
                        .HasColumnName("salary_after_work");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<string>("Title")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.HasKey("PostId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("JobScheduleId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("Domain.Models.RegistrationProgram", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("registration_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationId"));

                    b.Property<string>("ConnectorId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("connector_id");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enrollment_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_completed");

                    b.Property<int>("TraningProgramId")
                        .HasColumnType("int")
                        .HasColumnName("traning_program_id");

                    b.HasKey("RegistrationId");

                    b.HasIndex("ConnectorId");

                    b.HasIndex("TraningProgramId");

                    b.ToTable("RegistrationProgram", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sale_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleId"));

                    b.Property<string>("ImageURL")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("image_url");

                    b.Property<string>("SaleDescription")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("sale_description");

                    b.Property<string>("SaleName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("sale_name");

                    b.Property<float>("SalePercent")
                        .HasColumnType("real")
                        .HasColumnName("sale_percent");

                    b.HasKey("SaleId");

                    b.ToTable("Sale", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<float>("FinalPrice")
                        .HasColumnType("real")
                        .HasColumnName("final_price");

                    b.Property<float>("OriginalPrice")
                        .HasColumnType("real")
                        .HasColumnName("original_price");

                    b.Property<float>("RatingAvg")
                        .HasColumnType("real")
                        .HasColumnName("rating_avg");

                    b.Property<int>("SaleId")
                        .HasColumnType("int")
                        .HasColumnName("sale_id");

                    b.Property<string>("ServiceDescription")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("service_description");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("service_name");

                    b.Property<string>("ServiceTypeHours")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("service_type_hours");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("service_type_id");

                    b.HasKey("ServiceId");

                    b.HasIndex("SaleId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ServiceFeedback", b =>
                {
                    b.Property<int>("ServiceFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_feedback_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceFeedbackId"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customer_id");

                    b.Property<string>("FeedbackContent")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("feedback_content");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("RatingStars")
                        .HasColumnType("int")
                        .HasColumnName("rating_stars");

                    b.HasKey("ServiceFeedbackId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PostId");

                    b.ToTable("ServiceFeedback", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTypeId"));

                    b.Property<float>("ServicePricePerHour")
                        .HasColumnType("real")
                        .HasColumnName("service_price_per_hour");

                    b.Property<string>("ServiceTypeName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("service_type_name");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceType", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TaskED", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("complete_date");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<int>("JobScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("job_schedule_id");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int")
                        .HasColumnName("task_status");

                    b.Property<DateTime?>("TaskUpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("task_update_at");

                    b.Property<string>("TaskUpdateDescription")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("task_update_description");

                    b.Property<DateTime?>("WorkDateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("work_date_at");

                    b.HasKey("TaskId");

                    b.HasIndex("JobScheduleId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TrainingProgram", b =>
                {
                    b.Property<int>("TraningProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("traning_program_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TraningProgramId"));

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("TraningProgramContent")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("traning_program_content");

                    b.Property<string>("TraningProgramDuration")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("traning_program_duration");

                    b.Property<string>("TraningProgramLevel")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("traning_program_level");

                    b.Property<string>("TraningProgramTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("traning_program_title");

                    b.HasKey("TraningProgramId");

                    b.ToTable("TrainingProgram", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<string>("AccountId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("account_id");

                    b.Property<string>("AccountName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("account_name");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("currency_code");

                    b.Property<float>("CurrentWallet")
                        .HasColumnType("real")
                        .HasColumnName("current_wallet");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("payment_method");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<float>("TransactionAmount")
                        .HasColumnType("real")
                        .HasColumnName("transaction_amount");

                    b.Property<string>("TransactionNo")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("transaction_no");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("transaction_type");

                    b.Property<float>("WalletBalanceChange")
                        .HasColumnType("real")
                        .HasColumnName("wallet_balance_change");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.ToTable("TransactionHistory", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.HasOne("Domain.Models.ConnectorInfo", "ConnectorInfor")
                        .WithMany("Accounts")
                        .HasForeignKey("ConnectorInforId")
                        .HasConstraintName("FK_Account_ConnectorInfo");

                    b.Navigation("ConnectorInfor");
                });

            modelBuilder.Entity("Domain.Models.Address", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("Addresses")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Address_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Models.ConnectorFeedback", b =>
                {
                    b.HasOne("Domain.Models.TaskED", "Task")
                        .WithMany("ConnectorFeedbacks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConnectorFeedback_Task");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Domain.Models.ElderInformation", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("ElderInformation")
                        .HasForeignKey("ChildId")
                        .HasConstraintName("FK_ElderInformation_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Models.FavoriteList", b =>
                {
                    b.HasOne("Domain.Models.Account", "Customer")
                        .WithMany("FavoriteLists")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_FavoriteList_Account");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Models.JobSchedule", b =>
                {
                    b.HasOne("Domain.Models.Account", "Connector")
                        .WithMany("JobSchedules")
                        .HasForeignKey("ConnectorId")
                        .HasConstraintName("FK_JobSchedule_Account");

                    b.Navigation("Connector");
                });

            modelBuilder.Entity("Domain.Models.Notification", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Notification_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.HasOne("Domain.Models.Address", "Address")
                        .WithMany("Posts")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Post_Address");

                    b.HasOne("Domain.Models.Account", "Customer")
                        .WithMany("Posts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Post_Account");

                    b.HasOne("Domain.Models.JobSchedule", "JobSchedule")
                        .WithMany("Posts")
                        .HasForeignKey("JobScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Post_JobSchedule");

                    b.HasOne("Domain.Models.Service", "Service")
                        .WithMany("Posts")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Post_Service");

                    b.Navigation("Address");

                    b.Navigation("Customer");

                    b.Navigation("JobSchedule");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Models.RegistrationProgram", b =>
                {
                    b.HasOne("Domain.Models.Account", "Connector")
                        .WithMany("RegistrationPrograms")
                        .HasForeignKey("ConnectorId")
                        .HasConstraintName("FK_RegistrationProgram_Account");

                    b.HasOne("Domain.Models.TrainingProgram", "TraningProgram")
                        .WithMany("RegistrationPrograms")
                        .HasForeignKey("TraningProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RegistrationProgram_TrainingProgram");

                    b.Navigation("Connector");

                    b.Navigation("TraningProgram");
                });

            modelBuilder.Entity("Domain.Models.Service", b =>
                {
                    b.HasOne("Domain.Models.Sale", "Sale")
                        .WithMany("Services")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Service_Sale");

                    b.HasOne("Domain.Models.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Service_ServiceType");

                    b.Navigation("Sale");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Domain.Models.ServiceFeedback", b =>
                {
                    b.HasOne("Domain.Models.Account", "Customer")
                        .WithMany("ServiceFeedbacks")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ServiceFeedback_Account");

                    b.HasOne("Domain.Models.Post", "Post")
                        .WithMany("ServiceFeedbacks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ServiceFeedback_Post");

                    b.Navigation("Customer");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Models.TaskED", b =>
                {
                    b.HasOne("Domain.Models.JobSchedule", "JobSchedule")
                        .WithMany("Tasks")
                        .HasForeignKey("JobScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Task_JobSchedule");

                    b.Navigation("JobSchedule");
                });

            modelBuilder.Entity("Domain.Models.TransactionHistory", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_TransactionHistory_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ElderInformation");

                    b.Navigation("FavoriteLists");

                    b.Navigation("JobSchedules");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");

                    b.Navigation("RegistrationPrograms");

                    b.Navigation("ServiceFeedbacks");

                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("Domain.Models.Address", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Domain.Models.ConnectorInfo", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Models.JobSchedule", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Navigation("ServiceFeedbacks");
                });

            modelBuilder.Entity("Domain.Models.Sale", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Domain.Models.Service", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Domain.Models.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Domain.Models.TaskED", b =>
                {
                    b.Navigation("ConnectorFeedbacks");
                });

            modelBuilder.Entity("Domain.Models.TrainingProgram", b =>
                {
                    b.Navigation("RegistrationPrograms");
                });
#pragma warning restore 612, 618
        }
    }
}
